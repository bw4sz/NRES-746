data
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
summary(data)
sample.size <- length(data$GroupA)
reshape_data <- data.frame(
Group = rep(c("A","B"),each=sample.size),
Mass = c(data$GroupA,data$GroupB)
)
plot(Height~Group, data=reshape_data)
plot(Mass~Group, data=reshape_data)
boxplot(GroupA,GroupB,data=data,names=c("GroupA","GroupB"))
data$GroupA
boxplot(data$GroupA,data$GroupB,names=c("GroupA","GroupB"))
df <- data.frame(
GroupA = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179),
GroupB = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
)
summary(df)
sample.size <- length(df$GroupA)
df <- data.frame(
GroupA = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179),
GroupB = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
)
summary(df)
sample.size <- length(df$GroupA)
reshape_df <- data.frame(
Group = rep(c("A","B"),each=sample.size),
Mass = c(df$GroupA,df$GroupB)
)
plot(Mass~Group, data=reshape_df)
observed_dif <- mean(df$GroupA) - mean(df$GroupB)
observed_dif
df <- data.frame(
GroupA = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179),
GroupB = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
)
boxplot(df$GroupA,df$GroupB,names=c("GroupA","GroupB"))
observed_dif <- mean(df$GroupA) - mean(df$GroupB)
observed_dif
t.test(df$GroupA,df$GroupB, var.equal=TRUE, paired=FALSE)
df <- data.frame(
GroupA = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179),
GroupB = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
)
summary(df)
sample.size <- length(df$GroupA)
reshape_df <- data.frame(
Group = rep(c("A","B"),each=sample.size),
Mass = c(df$GroupA,df$GroupB)
)
plot(Mass~Group, data=reshape_df)
boxplot(df$GroupA,df$GroupB,names=c("GroupA","GroupB"))  # (alternative method!)
plot(Mass~Group, data=reshape_df)
observed_dif <- mean(df$GroupA) - mean(df$GroupB)
observed_dif
t.test(df$GroupA,df$GroupB, var.equal=TRUE, paired=FALSE)
popMean_null <- mean(reshape_df$Height)        # assume groups A and B come from a population with common mean
popMean_null <- mean(reshape_df$Mass)        # assume groups A and B come from a population with common mean
popMean_null <- mean(reshape_df$Mass)        # assume groups A and B come from a population with common mean
popSD_null <- sd(reshape_data$Mass)
popMean_null <- mean(reshape_df$Mass)        # assume groups A and B come from a population with common mean
popSD_null <- sd(reshape_data$Mass)
popData_null <- rnorm(n=lots,mean=popMean_null,sd=popSD_null)    # the statistical "population" of interest (under null model)
lots <- 1000000  # large number approximating infinity in this example!
popData_null <- rnorm(n=lots,mean=popMean_null,sd=popSD_null)    # the statistical "population" of interest (under null model)
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
sampleA
sampleB
round(sampleA)
difference <- mean(sampleA)-mean(sampleB)   # difference between sample means
difference
reps <- 1000
null_difs <- numeric(reps)
reps <- 1000
null_difs <- numeric(reps)
for(i in 1:reps){
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
null_difs[i] <- mean(sampleA)-mean(sampleB)
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
ordered_difs <- sort(abs(null_difs))   # first order the distribution of null results in terms of absolute magnitude of difference
higher_anomaly <- length(which(ordered_difs>=abs(observed_dif)))
p_value <- higher_anomaly/reps   # probability of getting a value with anomaly as or more extreme than observed, given null hypothesis is true...
p_value
many <- 5000
null_difs <- numeric(many)
i=1
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
newGroup
newGroup=="A"
newGroup=="B"
MGD <- reshape_df$Mass[newGroup=="A"]	- reshape_df$Mass[newGroup=="B"]
many <- 5000
null_difs <- numeric(many)
for (i in 1:many){
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
dif <- reshape_df$Mass[newGroup=="A"]	- reshape_df$Mass[newGroup=="B"]
null_difs[i] <- dif
}
many <- 5000
null_difs <- numeric(many)
for (i in 1:many){
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
dif <- reshape_df$Mass[newGroup=="A"]	- reshape_df$Mass[newGroup=="B"]
null_difs[i] <- dif
}
c(1:nrow(reshape_df))
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
reshape_df$Mass[newGroup=="A"]
dif <- mean(reshape_df$Mass[newGroup=="A"])	- mean(reshape_df$Mass[newGroup=="B"])
dif
null_difs[i] <- dif
many <- 5000
null_difs <- numeric(many)
for (i in 1:many){
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
dif <- mean(reshape_df$Mass[newGroup=="A"])	- mean(reshape_df$Mass[newGroup=="B"])
null_difs[i] <- dif
}
hist(null_difs)
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
sort(abs(null_difs))
sort(abs(null_difs))
reps <- 5000
null_difs <- numeric(reps)
for (i in 1:reps){
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
dif <- mean(reshape_df$Mass[newGroup=="A"])	- mean(reshape_df$Mass[newGroup=="B"])
null_difs[i] <- dif
}
hist(null_difs)
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
reps <- 5000
null_difs <- numeric(reps)
for(i in 1:reps){
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
null_difs[i] <- mean(sampleA)-mean(sampleB)
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
ordered_difs <- sort(abs(null_difs))
higher_anomaly <- length(which(ordered_difs>=abs(observed_dif)))
p_value <- higher_anomaly/reps
p_value
reps <- 5000
null_difs <- numeric(reps)
for (i in 1:reps){
newindices <- sample(c(1:nrow(reshape_df)))
newGroup <- reshape_df$Group[newindices]
dif <- mean(reshape_df$Mass[newGroup=="A"])	- mean(reshape_df$Mass[newGroup=="B"])
null_difs[i] <- dif
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
abs(null_difs)
higher_anomaly <- length(which(abs(null_difs)>=abs(observed_dif)))
p_value <- higher_anomaly/reps
p_value
reps <- 1000
null_difs <- numeric(reps)
for(i in 1:reps){
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
null_difs[i] <- mean(sampleA)-mean(sampleB)
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
ordered_difs <- sort(abs(null_difs))
higher_anomaly <- length(which(ordered_difs>=abs(observed_dif)))
p_value <- higher_anomaly/reps
p_value
reps <- 1000
null_difs <- numeric(reps)
for(i in 1:reps){
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
null_difs[i] <- mean(sampleA)-mean(sampleB)
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
ordered_difs <- sort(abs(null_difs))
higher_anomaly <- length(which(ordered_difs>=abs(observed_dif)))
p_value <- higher_anomaly/reps
p_value
reps <- 1000
null_difs <- numeric(reps)
for(i in 1:reps){
sampleA <- sample(popData_null,size=sample.size)
sampleB <- sample(popData_null,size=sample.size)
null_difs[i] <- mean(sampleA)-mean(sampleB)
}
hist(null_difs)
abline(v=observed_dif,col="green",lwd=3)
ordered_difs <- sort(abs(null_difs))
higher_anomaly <- length(which(ordered_difs>=abs(observed_dif)))
p_value <- higher_anomaly/reps
p_value
library(help = "datasets")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
c(1,0.01,5,0.5)
probs <- c(1,0.01,5,0.5)
probs <- probs/sum(probs)
n=100
apply(rmultinom(n,1,probs),2,function(t) which(t==1))
rlocodist <- function(n){
vals <- c(4,7,10,500)
probs <- c(1,0.01,5,0.5)
probs <- probs/sum(probs)
vals[apply(rmultinom(n,1,probs),2,function(t) which(t==1))]
}
lots=10000
datafountain <- rlocodist(lots)
hist(datafountain)
rlocodist <- function(n){
vals <- c(4,7,10,50)
probs <- c(1,0.01,5,0.5)
probs <- probs/sum(probs)
vals[apply(rmultinom(n,1,probs),2,function(t) which(t==1))]
}
lots=10000
datafountain <- rlocodist(lots)
hist(datafountain)
rlocodist <- function(n){
vals <- c(1,7,10,35)
probs <- c(1,0.01,5,0.5)
probs <- probs/sum(probs)
vals[apply(rmultinom(n,1,probs),2,function(t) which(t==1))]
}
lots=10000
datafountain <- rlocodist(lots)
hist(datafountain)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
n_red <- 104
n_blue <- 55
allSpheres <- c(n_red,n_blue,n_green)
names(allSpheres) <- c("red","blue","green")
n_red <- 104
n_blue <- 55
n_green <- 30
allSpheres <- c(n_red,n_blue,n_green)
names(allSpheres) <- c("red","blue","green")
allSpheres
P_blue <- allSpheres["blue"]/sum(allSpheres)
P_blue
Probs <- allSpheres/sum(allSpheres)
Probs
Probs["blue"] + Probs["red"]
Probs["blue"] + Probs["red"]
Probs["blue"]
Probs["red"]
Probs["blue"] * Probs["red"]
as.numeric( Probs["blue"] * Probs["red"] )
as.numeric( Probs["blue"] + Probs["red"] )
as.numeric( (Probs["blue"] * Probs["red"]) + (Probs["red"] * Probs["blue"]) )
as.numeric( Probs["blue"] + Probs["red"] + Probs["green"] )
n_red_sphere <- 39
n_blue_sphere <- 76
n_red_cube <- 101
n_blue_cube <- 25
allSpheres <- c(n_red_sphere,n_blue_sphere)
allCubles <- c(n_red_cube,n_blue_cube)
allSpheres <- c(n_red_sphere,n_blue_sphere)
allCubes <- c(n_red_cube,n_blue_cube)
allTypes <- c(allSpheres,allCubes)
allTypes
Shape <- c(sum(allSpheres),sum(allCubes))/sum(allTypes)
Shape
names(Shape) <- c("sphere","cube")
Shape
allSpheres <- c(n_red_sphere,n_blue_sphere)
allCubes <- c(n_red_cube,n_blue_cube)
allTypes <- c(allSpheres,allCubes)
allTypes <- matrix(allTypes,nrow=2,ncol=2,byrow=T)
allTypes
rownames(allTypes) <- c("sphere","cube")
colnames(allTypes) <- c("red","blue")
allTypes
allSpheres <- c(n_red_sphere,n_blue_sphere)
allCubes <- c(n_red_cube,n_blue_cube)
allTypes <- c(allSpheres,allCubes)
allTypes <- matrix(allTypes,nrow=2,ncol=2,byrow=T)
rownames(allTypes) <- c("sphere","cube")
colnames(allTypes) <- c("red","blue")
allTypes
Shape <- apply(allTypes,1,sum)/sum(allTypes)
Shape
Color <- c(sum(allSpheres),sum(allCubes))/sum(allTypes)
names(allSpheres) <- c("red","blue","green")
Prob_Shape
Prob_Shape <- apply(allTypes,1,sum)/sum(allTypes)
Prob_Shape
Prob_Color <- apply(allTypes,2,sum)/sum(allTypes)
Prob_Color
Prob_Color["red"]
as.numeric( Prob_Color["blue"] + Prob_Shape["cube"])
as.numeric( Prob_Color["blue"] + Prob_Shape["cube"] - (Prob_Color["blue"] * Prob_Shape["cube"])  )
allTypes
allTypes/sum(allTypes)
as.numeric( Prob_Color["blue"] * Prob_Shape["cube"])
allTypes/sum(allTypes)["cube","blue"]
allTypes/sum(allTypes)
(allTypes/sum(allTypes))["cube","blue"]
as.numeric( Prob_Color["blue"] + Prob_Shape["cube"] - (Prob_Color["blue"] * Prob_Shape["cube"])  )
allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"])
allTypes/sum(allTypes))["cube","blue"]
(allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"])
(allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]
(allTypes/sum(allTypes))["cube","blue"]
(allTypes/sum(allTypes))["cube","blue"]
(allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]
allTypes
allTypes/sum(allTypes)
0.1/0.41
(allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]
Prob_Shape["cube"]
as.numeric( Prob_Color["blue"] * Prob_Shape["cube"]) / Prob_Shape["cube"]
allTypes["cube",]
allTypes["cube",]/sum(allTypes["cube",])
(allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]
Prob_Color["blue"] * (allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]
as.numeric( Prob_Color["blue"] * (allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"] )
(allTypes/sum(allTypes))["cube","blue"]
as.numeric( Prob_Color["blue"] * (allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["blue"] )
as.numeric( Prob_Color["blue"] * (allTypes/sum(allTypes))["cube","blue"] / Prob_Color["blue"] )
allTypes
as.numeric( (allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"] + (allTypes/sum(allTypes))["sphere","blue"] / Prob_Shape["sphere"])
apply(allTypes),2,sum)
apply(allTypes,2,sum)
as.numeric( ((allTypes/sum(allTypes))["cube","blue"] / Prob_Shape["cube"]) * Prob_Shape["cube"] +
((allTypes/sum(allTypes))["sphere","blue"] / Prob_Shape["sphere"]) * Prob_Shape["sphere"]  )
apply(allTypes,2,sum)
101/(140+101)
Prob_Disease <- c(1,999999)
Prob_Disease <- Prob_Disease/sum(Prob_Disease)
Prob_Disease
names(Prob_Disease) <- c("yes","no")
Prob_Disease
1*Prob_Disease["yes"]
1*Prob_Disease["yes"] + 0.01*Prob_Disease["no"]
as.numeric( 1*Prob_Disease["yes"] + 0.01*Prob_Disease["no"] )
n_red_sphere <- 39
n_blue_sphere <- 76
n_red_cube <- 101
n_blue_cube <- 25
allSpheres <- c(n_red_sphere,n_blue_sphere)
allCubes <- c(n_red_cube,n_blue_cube)
allTypes <- c(allSpheres,allCubes)
allTypes <- matrix(allTypes,nrow=2,ncol=2,byrow=T)
rownames(allTypes) <- c("sphere","cube")
colnames(allTypes) <- c("red","blue")
allTypes
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
monty<-function(strat='stay',N=1000,print_games=TRUE){
doors<-1:3 #initialize the doors behind one of which is a good prize
win<-0 #to keep track of number of wins
for(i in 1:N){
prize<-floor(runif(1,1,4)) #randomize which door has the good prize
guess<-floor(runif(1,1,4)) #guess a door at random
## Reveal one of the doors you didn't pick which has a bum prize
if(prize!=guess)
reveal<-doors[-c(prize,guess)]
else
reveal<-sample(doors[-c(prize,guess)],1)
## Stay with your initial guess or switch
if(strat=='switch')
select<-doors[-c(reveal,guess)]
if(strat=='stay')
select<-guess
if(strat=='random')
select<-sample(doors[-reveal],1)
## Count up your wins
if(select==prize){
win<-win+1
outcome<-'Winner!'
}else
outcome<-'Losser!'
if(print_games)
cat(paste('Guess: ',guess,
'\nRevealed: ',reveal,
'\nSelection: ',select,
'\nPrize door: ',prize,
'\n',outcome,'\n\n',sep=''))
}
cat(paste('Using the ',strat,' strategy, your win percentage was ',win/N*100,'%\n',sep='')) #Print the win percentage of your strategy
}
monty(strat="stay")
monty(strat="switch")
monty(strat="random")
monty(strat="stay",print_games=FALSE)
ppois(5)
(ppois(5,5))
(ppois(c(0:15),5))
(dpois(c(0:15),5))
barplot(dpois(c(0:15),5))
barplot(dpois(c(0:15),5),x=c(0:15))
barplot(dpois(c(0:15),5)
barplot(dpois(c(0:15),5))
dpois(c(0:15),5)
barplot(dpois(c(0:15),5))
barplot(dpois(c(0:15),5))
axis(1,text=c(0:15))
axis(1,at=seq(0.5,15.5,1),text=c(0:15))
barplot(dpois(c(0:15),5))
axis(1,at=seq(0.5,15.5,1),text=c(0:15))
seq(0.5,15.5,1)
?axis
barplot(dpois(c(0:15),5))
axis(1,at=seq(0.5,15.5,1),labels=c(0:15))
?barplot
xvals <- seq(0,15,1)
xvals <- seq(0,15,1)
probs <- dpois(xvals)
xvals <- seq(0,15,1)
probs <- dpois(xvals)
probs
xvals <- seq(0,15,1)
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=5)
names(probs) <- xvals
probs
barplot(probs)
barplot(probs,ylab=Probability)
barplot(probs,ylab="Probability")
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
mean <- 5
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
rpois(10,mean)
mean <- 5
rpois(10,mean)    # the random numbers have no decimal component
mean <- 5
rpois(10,mean)    # the random numbers have no decimal component
# plot a discrete distribution!
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
?beta
rbeta(10,a=shape1,b=shape2)
?rbeta
rbeta(10,shape1,shape2)
shape1 = 2.9
shape2 = 0.8
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
curve(dbeta(x,shape1,shape2))
shape1 = 1
shape2 = 1
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
shape1 = 0.5
shape2 = 0.5
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
?integrate
integrate(pbeta(x,shape1,shape2),0,1)
integrate(f=pbeta(x,shape1,shape2),lower=0,upper=1)
integrate(f=pbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)
integrate(f=dbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)
dsum
csum
cumsum
barplot(cumsum(probs),ylab="Cum. Probability",main="Poisson distribution (discrete)")   # cumulative distribution
barplot(cumsum(probs),ylab="Cumulative Probability",main="Poisson distribution (discrete)")   # cumulative distribution
sum(probs)
size <- 10
prob <- 0.3
rbinom(10,size,prob)    # the random numbers have no decimal component
xvals <- seq(0,size,1)
xvals <- seq(0,size,1)
probs <- dpois(xvals,lambda=mean)
xvals <- seq(0,size,1)
probs <- dbinom(xvals,size,prob)
probs
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
barplot(probs,ylab="Probability",main="Binomial distribution")
barplot(cumsum(probs),ylab="Cumulative Probability",main="Binomial distribution")   # cumulative distribution
sum(probs)   # just to make sure it sums to 1!  Does it???
mean = 7.1
stdev = 1.9
b
rnorm(10,mean,stdev)
curve(dnorm(x,mean,sd))   # probability density
curve(dnorm(x,mean,stdev))   # probability density
curve(dnorm(x,mean,stdev),0,25)   # probability density
curve(dnorm(x,mean,stdev),0,15)   # probability density
curve(pnorm(x,mean,stdev),0,15)   # cumulative distribution
integrate(f=dnorm,lower=0,upper=Inf,mean=mean,sd=stdev)    # just to make sure it integrates to 1!!
integrate(f=dnorm,lower=-Inf,upper=Inf,mean=mean,sd=stdev)    # just to make sure it integrates to 1!!
