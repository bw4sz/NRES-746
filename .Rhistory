if(i=-1){
plot(xvals,results[,i])
}else{
points(xvals,results[,i])
}
}
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
i
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i==1){
plot(xvals,results[,i])
}else{
points(xvals,results[,i])
}
}
TrueN=1000
surveyors=1
days=3
probPerDay <- 1-(1-probPerPersonDay)^days
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^days
probPerDay
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerDay
proPerSurvey <- 1-(1-probPerDay)^days
probPerSurvey <- 1-(1-probPerDay)^days
probPerSurvey
rbinom
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
nobs
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
}
1/25
ThisYearAbund <- function(LastYearAbund=1000,trend=-0.03){
CurAbund <- LastYearAbund + trend*LastYearAbund
return(CurAbund)
}
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
}
LastYearAbund=1000
trend=-0.03
CurAbund <- LastYearAbund + trend*LastYearAbund
CurAbund
e
prevabund <- InitAbund
InitAbund=1000
trend=-0.03
years=25
prevabund <- InitAbund
abund <- numeric(nyears)
abund <- numeric(years)
prevabund <- InitAbund
detected <- numeric(years)
thisAbund <- ThisYearAbund(prevabund,trend)
detected <- numeric(years)
detected[y] = NumObserved(thisAbund,observers,days)
observers=1
days=3
prevabund <- InitAbund
detected <- numeric(years)
y=1
thisAbund <- ThisYearAbund(prevabund,trend)
detected[y] = NumObserved(thisAbund,observers,days)
detected[y]
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)
detected[y] = NumObserved(thisAbund,observers,days)
}
return(detected)
}
SimulateMonitorinData()
SimulateMonitoringData()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
xvals = seq(0,100,10)  # simulated x values define parameter space
deterministic_component <- function(x,a,b){
linear <- a + b*x   # linear functional form
return(linear)
}
expected_vals <- deterministic_component(xvals,175,-1.5)
expected_vals
plot(xvals,expected_vals)
rnorm
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),sqrt(1000))
stochastic_component <- function(x,variance){
sd <- sqrt(variance)
stochvals <- rnorm(length(x),x,sd)
return(stochvals)
}
sim_vals <- stochastic_component(expected_vals,variance=500)
plot(xvals,sim_vals)
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),sqrt(1000))
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500)
sim_vals
sim_vals <- stochastic_component(expected_vals,variance=500)
plot(xvals,sim_vals)
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500)
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i==1){
plot(xvals,results[,i],ylab="simulated values",xlab="parameter space")
}else{
points(xvals,results[,i])
}
}
boxplot
?boxplot
as.list(results)
apply(results,2)
apply(results,2, function(t) t)
lapply(seq_len(ncol(x)), function(i) x[,i])
lapply(seq_len(ncol(results)), function(i) results[,i])
boxplot(lapply(seq_len(ncol(results)), function(i) results[,i]))
results
boxplot(lapply(seq_len(nrow(results)), function(i) results[i,]))
seq_len
?seq_len
boxplot(lapply(c(1:nrow(results)) function(i) results[i,]))
1:nrow(results)
boxplot(lapply(1:nrow(results), function(i) results[i,]))
boxplot(lapply(1:nrow(results) function(i) results[i,]))
boxplot(lapply(1:nrow(results), function(i) results[i,]))
realdata <- c(125,50,90,110,80,75,100,400,350,290,350)
plot(xvals,realdata)
#### initialize:
reps <- 1000    # number of replicate datasets to generate
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <- stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]))
boxplot(lapply(1:nrow(results), function(i) results[i,]))
points(xvals,realdata)
realdata
plot(xvals,realdata)
plot(xvals,realdata,pch=20,cex=3,col="red")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
plot(xvals,realdata,pch=20,cex=3,col="red")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
?boxplot
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
library(dplyr,tidyr)
library(dplyr)
library(tidyr)
iris
data(iris)
dat <- gather(iris, variable, value, -Species)
dat
head(iris)
head(dat)
?gather
gather(results)
gather(as.data.frame(results))
gather(as.data.frame(t(results)))
head(results)
head(as.data.frame(results))
results
.
results <- as.data.frame(t(results))
head(results)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
# same result but less verbose
gather(mini_iris, key = flower_att, value = measurement, -Species)
reps <- 1000    # number of replicate datasets to generate
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <- stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]))
length(xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
?axis
axis(1,at=c(1:length(xvals)),labels=xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T,xaxt="n")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T,xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
points(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
boxplot(lapply(1:nrow(results), function(i) results[i,]),xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
points(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
}
NumObserved(TrueN=500,surveyors=2,days=7)
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
return(nobs)
}
NumObserved(TrueN=500,surveyors=2,days=7)
ThisYearAbund <- function(LastYearAbund=1000,trend=-0.03){
CurAbund <- LastYearAbund + trend*LastYearAbund
return(CurAbund)
}
ThisYearAbund(LastYearAbund=500,trend=-0.03)
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)
detected[y] = NumObserved(thisAbund,observers,days)
}
return(detected)
}
SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3)
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] = NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
}
return(detected)
}
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] = NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
return(detected)
}
SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3)
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] = NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
return(detected)
}
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
return(detected)
}
SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3)
y=1
InitAbund=1000
trend=-0.03
years=25
observers=1
days=3
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
thisAbund
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
detected[y]
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
prevabund
thisAbund
y=2
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
detected
thisAbund
ThisYearAbund <- function(LastYearAbund=1000,trend=-0.03){
CurAbund <- LastYearAbund + trend*LastYearAbund
CurAbund <- floor(CurAbund)  # can't have fractional individuals!
return(CurAbund)
}
ThisYearAbund(LastYearAbund=500,trend=-0.03)
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
return(detected)
}
SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3)
?lm
monitoringData=detected
detected
detected=SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3)
monitoringData=detected
time <- 1:length(monitoringData)
model <- lm(monitoringData~time)    # for now, let's use ordinary linear regression
model
model$coefficients
summary(model)
summary(model)$Coefficients
summary(model)$coefficients
p_value <- summary(model)$coefficients["time","Pr(>|t|)"]
p_value
sig_decline <- ifelse(p_value<=alpha,TRUE,FALSE)
alpha=0.05
sig_decline <- ifelse(p_value<=alpha,TRUE,FALSE)
sig_decline
IsDecline <- function(monitoringData,alpha=0.05){
time <- 1:length(monitoringData)
model <- lm(monitoringData~time)    # for now, let's use ordinary linear regression
p_value <- summary(model)$coefficients["time","Pr(>|t|)"]
sig_decline <- ifelse(p_value<=alpha,TRUE,FALSE)
return(sig_decline)
}
summary(model)$coefficients
isdecline <- ifelse(summary(model)$coefficients["time","Estimate"]<0,TRUE,FALSE)
isdecline
sig_decline <- ifelse((p_value<=alpha)&(isdecline),TRUE,FALSE)    # if declining and significant trend
sig_decline
IsDecline <- function(monitoringData,alpha=0.05){
time <- 1:length(monitoringData)
model <- lm(monitoringData~time)    # for now, let's use ordinary linear regression
p_value <- summary(model)$coefficients["time","Pr(>|t|)"]
isdecline <- ifelse(summary(model)$coefficients["time","Estimate"]<0,TRUE,FALSE)
sig_decline <- ifelse((p_value<=alpha)&(isdecline),TRUE,FALSE)    # if declining and significant trend
return(sig_decline)
}
IsDecline(c(10,20,15,1),alpha=0.05)
nreps <- 10000
InitAbund <- 1000
nreps <- 10000
initabund <- 1000
survint=2
surveyed <- c(1:nyears)%%survint
surveyed <- c(1:years)%%survint
surveyed
surveyed <- c(1:years)%%survint==0
surveyed
survint=3
surveyed <- c(1:years)%%survint==0
surveyed
detected[!surveyed] <- NA
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2){
prevabund <- InitAbund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
surveyed <- c(1:years)%%survint==0    # which years were surveys actually performed?
detected[!surveyed] <- NA
return(detected)
}
detected=SimulateMonitoringData(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2)
detected
monitoringData=detected
alpha=0.05
time <- 1:length(monitoringData)
time
model <- lm(monitoringData~time)    # for now, let's use ordinary linear regression
model
p_value <- summary(model)$coefficients["time","Pr(>|t|)"]
monitoringData
p_value <- summary(model)$coefficients["time","Pr(>|t|)"]
p_value
monitoringData
isdecline <- ifelse(summary(model)$coefficients["time","Estimate"]<0,TRUE,FALSE)
sig_decline <- ifelse((p_value<=alpha)&(isdecline),TRUE,FALSE)    # if declining and significant trend
IsDecline(monitoringData=c(10,20,NA,15,1),alpha=0.05)
decline <- logical(nreps)
decline
SimulateMonitoringData <- function(initabund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2){
prevabund <- initabund
detected <- numeric(years)     # set up storate variable
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)             # compute the current abundance on the basis of the trend
detected[y] <- NumObserved(thisAbund,observers,days)     # sample the current population using this monitoring scheme
prevabund <- thisAbund   # this years abundance becomes the previous years abundance
}
surveyed <- c(1:years)%%survint==0    # which years were surveys actually performed?
detected[!surveyed] <- NA
return(detected)
}
SimulateMonitoringData(initabund=1000,trend=-0.03,years=25,observers=1,days=3,survint=2)
observers=1
days=3
alpha=0.05
years=25
survint=2
trend=-0.03
decline <- logical(nreps)
nreps <- 1000
initabund <- 1000
decline <- logical(nreps)
SimulateMonitoringData(initabund,trend,years,observers,days,survint)
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline <- IsDecline(detected,alpha)
nreps <- 1000
initabund <- 1000
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline=TRUE))/nreps
return(Power)
}
GetPower()
nreps <- 1000
initabund <- 1000
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline==TRUE))/nreps
return(Power)
}
GetPower()
nreps <- 1000
initabund <- 100
GetPower <- function(observers=1,days=3,alpha=0.05,years=25,survint=2,trend=-0.03){
decline <- logical(nreps)
for(i in 1:nreps){
detected <- SimulateMonitoringData(initabund,trend,years,observers,days,survint)
decline[i] <- IsDecline(detected,alpha)
}
Power <- length(which(decline==TRUE))/nreps
return(Power)
}
GetPower()    # for default
detected
cat((sprintf("The statistical power to detect a decline for the default parameters is: %s",GetPower())))    # for default
powers <- numeric(0)
initabund = 1000
survints <- c(1,2,3,4,5)
survints <- c(1,2,3,4,5)
powers <- numeric(length(survints))
initabund = 1000
survints <- c(1,2,3,4,5)
powers <- numeric(length(survints))
for(i in 1:length(survints)){
powers[i] <- GetPower(survint=survints[i])
}
plot(powers~survints)
initabund = 1000
survints <- c(1:10)
powers <- numeric(length(survints))
i=1
powers[i] <- GetPower(survint=survints[i])
i=7
survints[i]
powers[i] <- GetPower(survint=survints[i])
survints <- c(1:6)
i=6
powers[i] <- GetPower(survint=survints[i])
survint
survint
i=6
survint=survints[i]
survint
SimulateMonitoringData(initabund,trend,years,observers,days,survint)
