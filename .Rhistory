monty<-function(strat='stay',N=1000,print_games=TRUE){
doors<-1:3 #initialize the doors behind one of which is a good prize
win<-0 #to keep track of number of wins
for(i in 1:N){
prize<-floor(runif(1,1,4)) #randomize which door has the good prize
guess<-floor(runif(1,1,4)) #guess a door at random
## Reveal one of the doors you didn't pick which has a bum prize
if(prize!=guess)
reveal<-doors[-c(prize,guess)]
else
reveal<-sample(doors[-c(prize,guess)],1)
## Stay with your initial guess or switch
if(strat=='switch')
select<-doors[-c(reveal,guess)]
if(strat=='stay')
select<-guess
if(strat=='random')
select<-sample(doors[-reveal],1)
## Count up your wins
if(select==prize){
win<-win+1
outcome<-'Winner!'
}else
outcome<-'Losser!'
if(print_games)
cat(paste('Guess: ',guess,
'\nRevealed: ',reveal,
'\nSelection: ',select,
'\nPrize door: ',prize,
'\n',outcome,'\n\n',sep=''))
}
cat(paste('Using the ',strat,' strategy, your win percentage was ',win/N*100,'%\n',sep='')) #Print the win percentage of your strategy
}
monty(strat="stay")
monty(strat="switch")
monty(strat="random")
monty(strat="stay",print_games=FALSE)
ppois(5)
(ppois(5,5))
(ppois(c(0:15),5))
(dpois(c(0:15),5))
barplot(dpois(c(0:15),5))
barplot(dpois(c(0:15),5),x=c(0:15))
barplot(dpois(c(0:15),5)
barplot(dpois(c(0:15),5))
dpois(c(0:15),5)
barplot(dpois(c(0:15),5))
barplot(dpois(c(0:15),5))
axis(1,text=c(0:15))
axis(1,at=seq(0.5,15.5,1),text=c(0:15))
barplot(dpois(c(0:15),5))
axis(1,at=seq(0.5,15.5,1),text=c(0:15))
seq(0.5,15.5,1)
?axis
barplot(dpois(c(0:15),5))
axis(1,at=seq(0.5,15.5,1),labels=c(0:15))
?barplot
xvals <- seq(0,15,1)
xvals <- seq(0,15,1)
probs <- dpois(xvals)
xvals <- seq(0,15,1)
probs <- dpois(xvals)
probs
xvals <- seq(0,15,1)
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=5)
names(probs) <- xvals
probs
barplot(probs)
barplot(probs,ylab=Probability)
barplot(probs,ylab="Probability")
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
mean <- 5
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
rpois(10,mean)
mean <- 5
rpois(10,mean)    # the random numbers have no decimal component
mean <- 5
rpois(10,mean)    # the random numbers have no decimal component
# plot a discrete distribution!
xvals <- seq(0,15,1)
probs <- dpois(xvals,lambda=mean)
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
?beta
rbeta(10,a=shape1,b=shape2)
?rbeta
rbeta(10,shape1,shape2)
shape1 = 2.9
shape2 = 0.8
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
curve(dbeta(x,shape1,shape2))
shape1 = 1
shape2 = 1
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
shape1 = 0.5
shape2 = 0.5
rbeta(10,shape1,shape2)
curve(dbeta(x,shape1,shape2))
curve(pbeta(x,shape1,shape2))
?integrate
integrate(pbeta(x,shape1,shape2),0,1)
integrate(f=pbeta(x,shape1,shape2),lower=0,upper=1)
integrate(f=pbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)
integrate(f=dbeta,lower=0,upper=1,shape1=shape1,shape2=shape2)
dsum
csum
cumsum
barplot(cumsum(probs),ylab="Cum. Probability",main="Poisson distribution (discrete)")   # cumulative distribution
barplot(cumsum(probs),ylab="Cumulative Probability",main="Poisson distribution (discrete)")   # cumulative distribution
sum(probs)
size <- 10
prob <- 0.3
rbinom(10,size,prob)    # the random numbers have no decimal component
xvals <- seq(0,size,1)
xvals <- seq(0,size,1)
probs <- dpois(xvals,lambda=mean)
xvals <- seq(0,size,1)
probs <- dbinom(xvals,size,prob)
probs
names(probs) <- xvals
barplot(probs,ylab="Probability",main="Poisson distribution (discrete)")
barplot(probs,ylab="Probability",main="Binomial distribution")
barplot(cumsum(probs),ylab="Cumulative Probability",main="Binomial distribution")   # cumulative distribution
sum(probs)   # just to make sure it sums to 1!  Does it???
mean = 7.1
stdev = 1.9
b
rnorm(10,mean,stdev)
curve(dnorm(x,mean,sd))   # probability density
curve(dnorm(x,mean,stdev))   # probability density
curve(dnorm(x,mean,stdev),0,25)   # probability density
curve(dnorm(x,mean,stdev),0,15)   # probability density
curve(pnorm(x,mean,stdev),0,15)   # cumulative distribution
integrate(f=dnorm,lower=0,upper=Inf,mean=mean,sd=stdev)    # just to make sure it integrates to 1!!
integrate(f=dnorm,lower=-Inf,upper=Inf,mean=mean,sd=stdev)    # just to make sure it integrates to 1!!
?replicate
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
xvals = seq(0,100,10)  # simulated x values define parameter space
linear_function <- function(x,a,b){
expected_value <- a*x + b   # linear function
return(expected_value)
}
exp_vals <- linear_function(xvals,75,-9)
exp_vals
xvals
linear_function <- function(x,a,b){
expected_value <- a + b*x   # linear function
return(expected_value)
}
exp_vals <- linear_function(xvals,75,-9)
exp_vals
xvals = seq(0,100,10)  # simulated x values define parameter space
linear_function <- function(x,a,b){
expected_value <- a + b*x   # linear function
return(expected_value)
}
exp_vals <- linear_function(xvals,175,-5)
exp_vals
xvals = seq(0,100,10)  # simulated x values define parameter space
linear_function <- function(x,a,b){
expected_value <- a + b*x   # linear function
return(expected_value)
}
exp_vals <- linear_function(xvals,175,-1.5)
exp_vals
curve(linear_function,0,100,a=175,b=-1.5)
?curve
curve(linear_function,0,100,add=FALSE,a=175,b=-1.5)
plot(x_vals,exp_vals)
plot(xvals,exp_vals)
stochastic_component <- function(x,variance){
stochvals <- rnorm(length(x),x,variance)
return(stochvals)
}
stochastic_component(rep(1,times=10),variance=2)
xvals = seq(0,100,10)  # simulated x values define parameter space
deterministic_component <- function(x,a,b){
linear <- a + b*x   # linear functional form
return(linear)
}
expected_vals <- deterministic_component(xvals,175,-1.5)
expected_vals
plot(xvals,exp_vals)
stochastic_component <- function(x,variance){
stochvals <- rnorm(length(x),x,variance)
return(stochvals)
}
stochastic_component <- function(x,variance){
sd <- sqrt(variance)
stochvals <- rnorm(length(x),x,sd)
return(stochvals)
}
stochastic_component(deterministic_component,variance=30)
x=deterministic_component()
x=deterministic_component
x=expected_vals
x
stochastic_component(expected_vals,variance=30)
sim_vals <- stochastic_component(expected_vals,variance=30)
plot(xvals,sim_vals)
sim_vals <- stochastic_component(expected_vals,variance=100)
plot(xvals,sim_vals)
plot(xvals,stochastic_component(deterministic_component(xvals,10,4),50))
deterministic_component(xvals,10,4)
plot(xvals,stochastic_component(deterministic_component(xvals,10,4),200))
plot(xvals,stochastic_component(deterministic_component(xvals,10,4),500))
plot(xvals,stochastic_component(deterministic_component(xvals,10,4),1000))
sqrt(1000)
rnorm(deterministic_component(xvals,10,4),sqrt(1000))
sim_vals <- rnorm(deterministic_component(xvals,10,4),sqrt(1000))
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000))
results[,i] <- sim_vals
}
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000))
results[,i] <- sim_vals
}
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
}
results
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i=1){
plot(results[,i])
}else{
points(results[,i])
}
}
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i=1){
plot(xvals,results[,i])
}else{
points(xvals,results[,i])
}
}
i=1
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
results[,i]
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i=-1){
plot(xvals,results[,i])
}else{
points(xvals,results[,i])
}
}
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
i
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i==1){
plot(xvals,results[,i])
}else{
points(xvals,results[,i])
}
}
TrueN=1000
surveyors=1
days=3
probPerDay <- 1-(1-probPerPersonDay)^days
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^days
probPerDay
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerDay
proPerSurvey <- 1-(1-probPerDay)^days
probPerSurvey <- 1-(1-probPerDay)^days
probPerSurvey
rbinom
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
nobs
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
}
1/25
ThisYearAbund <- function(LastYearAbund=1000,trend=-0.03){
CurAbund <- LastYearAbund + trend*LastYearAbund
return(CurAbund)
}
NumObserved <- function(TrueN=1000,surveyors=1,days=3){
probPerPersonDay <- 0.02
probPerDay <- 1-(1-probPerPersonDay)^surveyors
probPerSurvey <- 1-(1-probPerDay)^days
nobs <- rbinom(1,size=TrueN,prob=probPerSurvey)
}
LastYearAbund=1000
trend=-0.03
CurAbund <- LastYearAbund + trend*LastYearAbund
CurAbund
e
prevabund <- InitAbund
InitAbund=1000
trend=-0.03
years=25
prevabund <- InitAbund
abund <- numeric(nyears)
abund <- numeric(years)
prevabund <- InitAbund
detected <- numeric(years)
thisAbund <- ThisYearAbund(prevabund,trend)
detected <- numeric(years)
detected[y] = NumObserved(thisAbund,observers,days)
observers=1
days=3
prevabund <- InitAbund
detected <- numeric(years)
y=1
thisAbund <- ThisYearAbund(prevabund,trend)
detected[y] = NumObserved(thisAbund,observers,days)
detected[y]
SimulateMonitoringData <- function(InitAbund=1000,trend=-0.03,years=25,observers=1,days=3){
prevabund <- InitAbund
detected <- numeric(years)
for(y in 1:years){
thisAbund <- ThisYearAbund(prevabund,trend)
detected[y] = NumObserved(thisAbund,observers,days)
}
return(detected)
}
SimulateMonitorinData()
SimulateMonitoringData()
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
xvals = seq(0,100,10)  # simulated x values define parameter space
deterministic_component <- function(x,a,b){
linear <- a + b*x   # linear functional form
return(linear)
}
expected_vals <- deterministic_component(xvals,175,-1.5)
expected_vals
plot(xvals,expected_vals)
rnorm
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),sqrt(1000))
stochastic_component <- function(x,variance){
sd <- sqrt(variance)
stochvals <- rnorm(length(x),x,sd)
return(stochvals)
}
sim_vals <- stochastic_component(expected_vals,variance=500)
plot(xvals,sim_vals)
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),sqrt(1000))
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500)
sim_vals
sim_vals <- stochastic_component(expected_vals,variance=500)
plot(xvals,sim_vals)
sim_vals <- stochastic_component(deterministic_component(xvals,175,-1.5),500)
reps <- 50
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <-  stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
if(i==1){
plot(xvals,results[,i],ylab="simulated values",xlab="parameter space")
}else{
points(xvals,results[,i])
}
}
boxplot
?boxplot
as.list(results)
apply(results,2)
apply(results,2, function(t) t)
lapply(seq_len(ncol(x)), function(i) x[,i])
lapply(seq_len(ncol(results)), function(i) results[,i])
boxplot(lapply(seq_len(ncol(results)), function(i) results[,i]))
results
boxplot(lapply(seq_len(nrow(results)), function(i) results[i,]))
seq_len
?seq_len
boxplot(lapply(c(1:nrow(results)) function(i) results[i,]))
1:nrow(results)
boxplot(lapply(1:nrow(results), function(i) results[i,]))
boxplot(lapply(1:nrow(results) function(i) results[i,]))
boxplot(lapply(1:nrow(results), function(i) results[i,]))
realdata <- c(125,50,90,110,80,75,100,400,350,290,350)
plot(xvals,realdata)
#### initialize:
reps <- 1000    # number of replicate datasets to generate
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <- stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]))
boxplot(lapply(1:nrow(results), function(i) results[i,]))
points(xvals,realdata)
realdata
plot(xvals,realdata)
plot(xvals,realdata,pch=20,cex=3,col="red")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
plot(xvals,realdata,pch=20,cex=3,col="red")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
?boxplot
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
library(dplyr,tidyr)
library(dplyr)
library(tidyr)
iris
data(iris)
dat <- gather(iris, variable, value, -Species)
dat
head(iris)
head(dat)
?gather
gather(results)
gather(as.data.frame(results))
gather(as.data.frame(t(results)))
head(results)
head(as.data.frame(results))
results
.
results <- as.data.frame(t(results))
head(results)
# get first observation for each Species in iris data -- base R
mini_iris <- iris[c(1, 51, 101), ]
# gather Sepal.Length, Sepal.Width, Petal.Length, Petal.Width
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
# same result but less verbose
gather(mini_iris, key = flower_att, value = measurement, -Species)
reps <- 1000    # number of replicate datasets to generate
samplesize <- length(xvals)
results <- array(0,dim=c(samplesize,reps))   # storage array for results
for(i in 1:reps){
exp_vals <- deterministic_component(xvals,a=10,b=4)
sim_vals <- stochastic_component(exp_vals,1000)
results[,i] <- sim_vals
}
# now make a boxplot of the results
boxplot(lapply(1:nrow(results), function(i) results[i,]))
length(xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
?axis
axis(1,at=c(1:length(xvals)),labels=xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T)
plot(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T,xaxt="n")
boxplot(lapply(1:nrow(results), function(i) results[i,]),add=T,xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
points(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
boxplot(lapply(1:nrow(results), function(i) results[i,]),xaxt="n")
axis(1,at=c(1:length(xvals)),labels=xvals)
points(c(1:length(xvals)),realdata,pch=20,cex=3,col="red",xaxt="n")
